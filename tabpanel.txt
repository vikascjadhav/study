// App.jsx
import React from 'react';
import { TabPanel, Tab } from './TabPanel';

const App = () => {
  return (
    <div style={{ maxWidth: '900px', margin: '0 auto', padding: '20px' }}>
      <h2>University Dashboard</h2>
      <TabPanel>
        <Tab label="Students">
          <p>Welcome to the Students tab. Manage student details here.</p>
        </Tab>
        <Tab label="Departments">
          <p>Here you can manage all departments.</p>
        </Tab>
        <Tab label="Admissions">
          <p>Admission-related info and actions go here.</p>
        </Tab>
        <Tab label="Library">
          <p>View and manage library records.</p>
        </Tab>
        <Tab label="Exams">
          <p>Schedule and manage exams.</p>
        </Tab>
        <Tab label="Results">
          <p>Upload and review results for students.</p>
        </Tab>
        <Tab label="Alumni">
          <p>Keep track of alumni data and events.</p>
        </Tab>
      </TabPanel>
    </div>
  );
};

export default App;






/* TabPanel.css */
.tabpanel-container {
  width: 100%;
  font-family: 'Segoe UI', sans-serif;
}

.tab-header-scroll {
  overflow-x: auto;
  white-space: nowrap;
  scrollbar-width: thin;
}

.tab-header {
  display: flex;
  border-bottom: 2px solid #ccc;
  background-color: #f9f9f9;
}

.tab-button {
  flex-shrink: 0;
  padding: 12px 20px;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 16px;
  font-weight: 500;
  transition: background 0.2s ease;
  outline: none;
  white-space: nowrap;
}

.tab-button:hover {
  background-color: #eee;
}

.tab-button.active {
  border-bottom: 3px solid #007bff;
  background-color: #fff;
  color: #007bff;
}

.tab-content {
  padding: 16px;
}

.tab-view {
  display: none;
}

.tab-view.visible {
  display: block;
}





// TabPanel.jsx
import React, { useState, useRef } from 'react';
import './TabPanel.css';

export const TabPanel = ({ children }) => {
  const [activeIndex, setActiveIndex] = useState(0);
  const tabsRef = useRef([]);
  const tabs = React.Children.toArray(children);

  const focusTab = (index) => {
    setActiveIndex(index);
    tabsRef.current[index]?.focus();
  };

  const handleKeyDown = (e, index) => {
    const lastIndex = tabs.length - 1;
    switch (e.key) {
      case 'ArrowRight':
        focusTab(index === lastIndex ? 0 : index + 1);
        break;
      case 'ArrowLeft':
        focusTab(index === 0 ? lastIndex : index - 1);
        break;
      case 'Home':
        focusTab(0);
        break;
      case 'End':
        focusTab(lastIndex);
        break;
      default:
        break;
    }
  };

  return (
    <div className="tabpanel-container">
      <div className="tab-header-scroll">
        <div className="tab-header" role="tablist">
          {tabs.map((tab, index) => (
            <button
              key={index}
              className={`tab-button ${index === activeIndex ? 'active' : ''}`}
              onClick={() => setActiveIndex(index)}
              ref={(el) => (tabsRef.current[index] = el)}
              onKeyDown={(e) => handleKeyDown(e, index)}
              tabIndex={index === activeIndex ? 0 : -1}
              role="tab"
              aria-selected={index === activeIndex}
            >
              {tab.props.label}
            </button>
          ))}
        </div>
      </div>
      <div className="tab-content">
        {tabs.map((tab, index) => (
          <div
            key={index}
            className={`tab-view ${index === activeIndex ? 'visible' : 'hidden'}`}
            role="tabpanel"
          >
            {tab.props.children}
          </div>
        ))}
      </div>
    </div>
  );
};

export const Tab = ({ children }) => <>{children}</>;
