import org.ehcache.Cache;
import org.ehcache.CacheManager;
import org.ehcache.core.statistics.CacheStatistics;
import org.ehcache.core.Ehcache;
import org.ehcache.core.statistics.TierStatistics;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EhcacheStatsLogger {

    private static final Logger logger = LoggerFactory.getLogger(EhcacheStatsLogger.class);

    private final CacheManager cacheManager;

    public EhcacheStatsLogger(CacheManager cacheManager) {
        this.cacheManager = cacheManager;
    }

    public void logCacheStats() {
        cacheManager.getRuntimeConfiguration().getCacheConfigurations().keySet()
                .forEach(cacheName -> {
                    Cache<Object, Object> cache = cacheManager.getCache(cacheName, Object.class, Object.class);

                    if (cache instanceof Ehcache) {
                        Ehcache<?, ?> ehcache = (Ehcache<?, ?>) cache;
                        CacheStatistics statistics = ehcache.getStatistics();

                        long entryCount = statistics.getKnownSize();
                        logger.info("Cache '{}' entries: {}", cacheName, entryCount);

                        // Tier Statistics for memory usage
                        for (TierStatistics tierStat : statistics.getTierStatistics()) {
                            String tierName = tierStat.getTierName();
                            long occupiedBytes = tierStat.getOccupiedByteSize();
                            double sizeInMB = occupiedBytes / (1024.0 * 1024.0);

                            logger.info("Cache '{}' Tier '{}' Size: {} MB", cacheName, tierName, String.format("%.2f", sizeInMB));
                        }
                    }
                });
    }
}
