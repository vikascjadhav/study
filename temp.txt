// App.tsx or StudentTable.tsx
import React, { useState } from 'react';
import StudentForm from './StudentForm';

const dummyStudent = {
  id: '123',
  name: 'John Doe',
  type: 'internal',
  age: '21',
  email: 'john@example.com',
};

export default function App() {
  const [selectedStudent, setSelectedStudent] = useState<typeof dummyStudent | null>(null);
  const [isCreating, setIsCreating] = useState(false);

  const openStudent = (student: typeof dummyStudent) => {
    setSelectedStudent(student);
    setIsCreating(false);
  };

  const handleSave = (studentData: typeof dummyStudent) => {
    console.log('Saved student:', studentData);

    if (isCreating) {
      // Add to student list logic here if youâ€™re managing a list
      console.log('Created new student');
    } else {
      // Update existing student logic
      console.log('Updated student');
    }

    setSelectedStudent(studentData);
    setIsCreating(false);
  };

  return (
    <div>
      <h2>Student Table</h2>

      {/* Example open button */}
      <button onClick={() => openStudent(dummyStudent)}>Open Student</button>

      {/* Create Student Button */}
      <button onClick={() => {
        setSelectedStudent(null);
        setIsCreating(true);
      }}>
        Create Student
      </button>

      {/* Render Form */}
      {(selectedStudent || isCreating) && (
        <StudentForm
          mode={isCreating ? 'create' : 'view'}
          studentData={selectedStudent || undefined}
          onSave={handleSave}
        />
      )}
    </div>
  );
}





// StudentForm.tsx

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';

type StudentType = 'internal' | 'external';

interface Student {
  id: string;
  name: string;
  type: StudentType;
  age: string;
  email: string;
}

type Mode = 'create' | 'view' | 'edit';

interface Props {
  mode: Mode;
  studentData?: Student;
  onSave: (data: Student) => void;
}

const StudentForm: React.FC<Props> = ({ mode: initialMode, studentData, onSave }) => {
  const [mode, setMode] = useState<Mode>(initialMode);
  const { register, handleSubmit, watch, formState: { errors }, reset } = useForm<Student>({
    defaultValues: studentData || {
      id: '',
      name: '',
      type: 'internal',
      age: '',
      email: '',
    }
  });

  const currentType = watch('type');

  const isDisabled = (field: keyof Student): boolean => {
    if (mode === 'create') return false;
    if (mode === 'view') return true;
    if (mode === 'edit') {
      if (currentType === 'external') {
        return field !== 'name'; // Only name is editable
      }
      return field === 'id'; // Internal: all but ID editable
    }
    return false;
  };

  const onSubmit = (data: Student) => {
    onSave(data);
    if (mode === 'edit') {
      setMode('view');
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div>
        <label>ID:</label>
        <input {...register('id', { required: true })} disabled={isDisabled('id')} />
        {errors.id && <span>ID is required</span>}
      </div>

      <div>
        <label>Name:</label>
        <input {...register('name', { required: true })} disabled={isDisabled('name')} />
        {errors.name && <span>Name is required</span>}
      </div>

      <div>
        <label>Type:</label>
        <select {...register('type')} disabled={isDisabled('type')}>
          <option value="internal">Internal</option>
          <option value="external">External</option>
        </select>
      </div>

      <div>
        <label>Age:</label>
        <input type="number" {...register('age')} disabled={isDisabled('age')} />
      </div>

      <div>
        <label>Email:</label>
        <input type="email" {...register('email')} disabled={isDisabled('email')} />
      </div>

      <div style={{ marginTop: '1em' }}>
        {mode === 'view' && (
          <button type="button" onClick={() => setMode('edit')}>Edit</button>
        )}
        {mode !== 'view' && (
          <button type="submit">Save</button>
        )}
      </div>
    </form>
  );
};

export default StudentForm;









