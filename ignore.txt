@Configuration
@EnableCaching
public class EhcacheConfig {

    @Autowired
    private Environment env;

    @Bean
    public JCacheManagerCustomizer cacheManagerCustomizer() {
        return cacheManager -> {
            Map<String, Map<String, String>> cacheSettings = bindCacheSettings();

            cacheSettings.forEach((cacheName, config) -> {
                long ttl = Long.parseLong(config.get("ttlSeconds"));
                long heap = Long.parseLong(config.get("heapEntries"));

                // Build Cache Configuration with TTL, Heap Size, and Statistics
                org.ehcache.config.CacheConfiguration<Object, Object> ehcacheConfig =
                        CacheConfigurationBuilder.newCacheConfigurationBuilder(
                                Object.class,
                                Object.class,
                                ResourcePoolsBuilder.heap(heap)) // Set Heap size
                        .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofSeconds(ttl))) // Set TTL
                        .withService(new org.ehcache.core.config.StatisticsServiceConfiguration()) // Enable statistics
                        .build();

                // Create cache with the defined configuration in JCache manager
                javax.cache.CacheManager jCacheManager = cacheManager.unwrap(javax.cache.CacheManager.class);
                jCacheManager.createCache(cacheName, Eh107Configuration.fromEhcacheCacheConfiguration(ehcacheConfig));
                System.out.println("Cache Created: " + cacheName + " with TTL: " + ttl + "s and Heap: " + heap);
            });
        };
    }

    private Map<String, Map<String, String>> bindCacheSettings() {
        return Binder.get(env).bind("cache.configs", new TypeReference<Map<String, Map<String, String>>>() {}).orElse(Map.of());
    }

    @Bean
    public CacheManager springCacheManager(javax.cache.CacheManager jCacheManager) {
        return new JCacheCacheManager(jCacheManager);
    }
}
