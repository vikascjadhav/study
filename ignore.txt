import org.ehcache.CacheManager;
import org.ehcache.config.builders.CacheConfigurationBuilder;
import org.ehcache.config.builders.CacheManagerBuilder;
import org.ehcache.config.builders.ExpiryPolicyBuilder;
import org.ehcache.config.builders.ResourcePoolsBuilder;
import org.ehcache.core.statistics.DefaultStatisticsService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.time.Duration;

@Configuration
public class CacheConfig {

    @Bean
    public CacheManager ehCacheManager(CacheProperties cacheProperties) {
        DefaultStatisticsService statisticsService = new DefaultStatisticsService();
        CacheManagerBuilder<?> builder = CacheManagerBuilder.newCacheManagerBuilder()
                .using(statisticsService);

        cacheProperties.getConfigs().forEach((cacheName, config) -> {
            builder.withCache(cacheName,
                    CacheConfigurationBuilder.newCacheConfigurationBuilder(
                            String.class,
                            String.class,
                            ResourcePoolsBuilder.heap(config.getHeapEntries()))
                            .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofSeconds(config.getTtlSeconds())))
            );
        });

        return builder.build(true); // activates the cache manager
    }
}


import org.ehcache.CacheManager;
import org.ehcache.core.statistics.CacheStatistics;
import org.ehcache.core.statistics.DefaultStatisticsService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class CacheStatsLogger {

    private static final Logger logger = LoggerFactory.getLogger(CacheStatsLogger.class);
    private final DefaultStatisticsService statisticsService;

    public CacheStatsLogger(DefaultStatisticsService statisticsService) {
        this.statisticsService = statisticsService;
    }

    // Logs every 10 minutes
    @Scheduled(fixedRate = 10 * 60 * 1000)
    public void logCacheStats() {
        for (String cacheName : statisticsService.getKnownStatistics().keySet()) {
            CacheStatistics stats = statisticsService.getCacheStatistics(cacheName);
            logger.info("Cache [{}] - Hits: {}, Misses: {}, Evictions: {}, Puts: {}, Removals: {}",
                    cacheName,
                    stats.getCacheHits(),
                    stats.getCacheMisses(),
                    stats.getCacheEvictions(),
                    stats.getCachePuts(),
                    stats.getCacheRemovals()
            );
        }
    }
}
