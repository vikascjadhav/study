import { diff } from 'deep-diff';

export const withLogger = (reducer) => {
  return (state, action) => {
    const nextState = reducer(state, action);

    if (process.env.NODE_ENV !== 'production') {
      console.groupCollapsed(`%cAction: ${action.type}`, 'color: #03A9F4; font-weight: bold');
      console.log('%cPrev State:', 'color: gray', state);
      console.log('%cAction:', 'color: blue', action);
      console.log('%cNext State:', 'color: green', nextState);

      const differences = diff(state, nextState);

      if (!differences || differences.length === 0) {
        console.log('%cNo deep state changes detected.', 'color: orange');
      } else {
        console.log('%cDeep State Changes:', 'color: purple');

        differences.forEach((change) => {
          const path = Array.isArray(change.path)
            ? change.path.join('.')
            : '(unknown)';

          switch (change.kind) {
            case 'E': // Edited
              console.log(
                `%c[Changed] %c${path}`,
                'color: red; font-weight: bold',
                'color: black',
                'from',
                'lhs' in change ? change.lhs : '(undefined)',
                'to',
                'rhs' in change ? change.rhs : '(undefined)'
              );
              break;
            case 'N': // New
              console.log(
                `%c[Added] %c${path}`,
                'color: green; font-weight: bold',
                'color: black',
                'value:',
                'rhs' in change ? change.rhs : '(undefined)'
              );
              break;
            case 'D': // Deleted
              console.log(
                `%c[Deleted] %c${path}`,
                'color: gray; font-weight: bold',
                'color: black',
                'was:',
                'lhs' in change ? change.lhs : '(undefined)'
              );
              break;
            case 'A': // Array change
              console.log(
                `%c[Array Change] %c${path}[${change.index}]`,
                'color: blue; font-weight: bold',
                'color: black',
                'item:',
                'item' in change ? change.item : '(undefined)'
              );
              break;
            default:
              console.log('%c[Other]', 'color: #999', change);
          }
        });
      }

      console.groupEnd();
    }

    return nextState;
  };
};
