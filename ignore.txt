// loggerMiddleware.js

import { deepDiff } from './deepDiff';

export const withLogger = (reducer) => {
  return (state, action) => {
    const nextState = reducer(state, action);

    if (process.env.NODE_ENV !== 'production') {
      console.groupCollapsed(`%cAction: ${action.type}`, 'color: #03A9F4; font-weight: bold');
      console.log('%cPrev State:', 'color: gray', state);
      console.log('%cAction:', 'color: blue', action);
      console.log('%cNext State:', 'color: green', nextState);

      const changes = deepDiff(state, nextState);

      if (changes.length === 0) {
        console.log('%cNo state changes detected.', 'color: orange');
      } else {
        console.log('%cChanged properties:', 'color: purple', changes.map(c => c.path));
        changes.forEach(change => {
          console.log(
            `%c${change.path}:`,
            'color: red; font-weight: bold',
            'from',
            change.from,
            'to',
            change.to
          );
        });
      }

      console.groupEnd();
    }

    return nextState;
  };
};



// deepDiff.js

export const deepDiff = (prev, next, path = '') => {
  const changes = [];

  const allKeys = new Set([...Object.keys(prev || {}), ...Object.keys(next || {})]);

  allKeys.forEach((key) => {
    const fullPath = path ? `${path}.${key}` : key;
    const prevVal = prev?.[key];
    const nextVal = next?.[key];

    const bothObjects = isObject(prevVal) && isObject(nextVal);

    if (bothObjects) {
      changes.push(...deepDiff(prevVal, nextVal, fullPath));
    } else if (prevVal !== nextVal) {
      changes.push({ path: fullPath, from: prevVal, to: nextVal });
    }
  });

  return changes;
};

const isObject = (val) => typeof val === 'object' && val !== null && !Array.isArray(val);

