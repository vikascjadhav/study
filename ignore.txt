import org.ehcache.jsr107.Eh107Configuration;
import org.ehcache.jsr107.EhcacheCachingProvider;
import org.springframework.cache.jcache.JCacheCacheManager;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.Caching;

...

@Autowire
private org.springframework.cache.CacheManager springCacheManager;

public void logStats() {
    if (springCacheManager instanceof JCacheCacheManager) {
        javax.cache.CacheManager jcacheManager = ((JCacheCacheManager) springCacheManager).getCacheManager();

        for (String cacheName : jcacheManager.getCacheNames()) {
            Cache<?, ?> cache = jcacheManager.getCache(cacheName);
            if (cache != null) {
                // Unwrap Ehcache for stats
                org.ehcache.jsr107.Eh107Cache<?, ?> eh107Cache = (org.ehcache.jsr107.Eh107Cache<?, ?>) cache;
                org.ehcache.core.Ehcache<?, ?> nativeEhcache = (org.ehcache.core.Ehcache<?, ?>) eh107Cache.unwrap(org.ehcache.Cache.class);

                System.out.println("Stats for cache [" + cacheName + "]: " + nativeEhcache.getRuntimeConfiguration().getResourcePools());
                System.out.println("Hits: " + nativeEhcache.getStatistics().getCacheHits());
                System.out.println("Misses: " + nativeEhcache.getStatistics().getCacheMisses());
            }
        }
    }
}
