cache:
  name1:
    ttl: 600
    heap: 100
  name2:
    ttl: 300
    heap: 200



import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;

@SpringBootApplication
@EnableConfigurationProperties(CacheProperties.class) // Enable CacheProperties  -------------------------------------
public class MyApplication {

    public static void main(String[] args) {
        SpringApplication.run(MyApplication.class, args);
    }
}



import org.ehcache.config.builders.*;
import org.ehcache.core.config.DefaultConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.ehcache.CacheManager;
import org.ehcache.config.CacheConfiguration;
import org.ehcache.core.spi.service.StatisticsService;
import org.ehcache.config.ResourcePoolsBuilder;
import org.ehcache.config.ExpiryPolicyBuilder;

import java.time.Duration;
import java.util.Map;

@Configuration
public class CacheManagerConfig {

    private final CacheProperties cacheProperties;

    public CacheManagerConfig(CacheProperties cacheProperties) {
        this.cacheProperties = cacheProperties;
    }

    @Bean
    public CacheManager cacheManager() {
        CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(true);
        
        Map<String, CacheProperties.CacheConfig> caches = cacheProperties.getCaches(); --------------------

        // Loop through all caches and add them
        caches.forEach((cacheName, config) -> {
            CacheConfiguration<Object, Object> cacheConfig = CacheConfigurationBuilder
                    .newCacheConfigurationBuilder(Object.class, Object.class, ResourcePoolsBuilder.heap(config.getHeap()))
                    .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofSeconds(config.getTtl())))
                    .build();

            cacheManager.createCache(cacheName, cacheConfig);
        });

        return cacheManager;
    }
}



import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.util.Map;

@Component
@ConfigurationProperties(prefix = "cache")
public class CacheProperties {

    private Map<String, CacheConfig> caches;

    public Map<String, CacheConfig> getCaches() {
        return caches;
    }

    public void setCaches(Map<String, CacheConfig> caches) {
        this.caches = caches;
    }

    public static class CacheConfig {
        private long ttl;
        private long heap;

        public long getTtl() {
            return ttl;
        }

        public void setTtl(long ttl) {
            this.ttl = ttl;
        }

        public long getHeap() {
            return heap;
        }

        public void setHeap(long heap) {
            this.heap = heap;
        }
    }
}

