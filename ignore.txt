

import React, { useState } from "react";

function TabExample() {
  const [activeTab, setActiveTab] = useState("tab1");

  return (
    <div>
      <div style={{ display: "flex", gap: "10px", marginBottom: "20px" }}>
        <button onClick={() => setActiveTab("tab1")}>Tab 1</button>
        <button onClick={() => setActiveTab("tab2")}>Tab 2</button>
        <button onClick={() => setActiveTab("tab3")}>Tab 3</button>
      </div>

      <div>
        <TabPanel isActive={activeTab === "tab1"}>
          <h2>Tab 1 Content</h2>
          <p>This is content of Tab 1</p>
        </TabPanel>

        <TabPanel isActive={activeTab === "tab2"}>
          <h2>Tab 2 Content</h2>
          <p>This is content of Tab 2</p>
        </TabPanel>

        <TabPanel isActive={activeTab === "tab3"}>
          <h2>Tab 3 Content</h2>
          <p>This is content of Tab 3</p>
        </TabPanel>
      </div>
    </div>
  );
}

function TabPanel({ isActive, children }) {
  return (
    <div style={{ display: isActive ? "block" : "none" }}>
      {children}
    </div>
  );
}

export default TabExample;

-------------------------------------
import React, { useState } from "react";
import { useForm } from "react-hook-form";

function TabbedForm() {
  const [activeTab, setActiveTab] = useState("personal");
  
  const { register, handleSubmit, formState: { errors }, watch } = useForm({
    defaultValues: {
      name: "",
      age: "",
      email: "",
      address: ""
    }
  });

  const onSubmit = (data) => {
    console.log("Form Data:", data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      {/* Tab Buttons */}
      <div style={{ display: "flex", gap: "10px", marginBottom: "20px" }}>
        <button type="button" onClick={() => setActiveTab("personal")}>Personal Info</button>
        <button type="button" onClick={() => setActiveTab("contact")}>Contact Info</button>
      </div>

      {/* Tab Panels */}
      <div>
        <TabPanel isActive={activeTab === "personal"}>
          <h3>Personal Info</h3>
          <div>
            <label>Name:</label>
            <input {...register("name", { required: true })} />
            {errors.name && <span style={{ color: "red" }}>Name is required</span>}
          </div>
          <div>
            <label>Age:</label>
            <input type="number" {...register("age", { required: true })} />
            {errors.age && <span style={{ color: "red" }}>Age is required</span>}
          </div>
        </TabPanel>

        <TabPanel isActive={activeTab === "contact"}>
          <h3>Contact Info</h3>
          <div>
            <label>Email:</label>
            <input type="email" {...register("email", { required: true })} />
            {errors.email && <span style={{ color: "red" }}>Email is required</span>}
          </div>
          <div>
            <label>Address:</label>
            <input {...register("address")} />
          </div>
        </TabPanel>
      </div>

      <button type="submit">Submit</button>

      {/* Debugging watch */}
      <pre>{JSON.stringify(watch(), null, 2)}</pre>
    </form>
  );
}

function TabPanel({ isActive, children }) {
  return (
    <div style={{ display: isActive ? "block" : "none" }}>
      {children}
    </div>
  );
}

export default TabbedForm;



10.208.211.0
10.208.211.1
10.208.211.2
10.208.211.3
10.208.211.4
10.208.211.5
10.208.211.6
10.208.211.7
10.208.211.8
10.208.211.9
10.208.211.10
10.208.211.11
10.208.211.12
10.208.211.13
10.208.211.14
10.208.211.15
10.208.211.16
10.208.211.17
10.208.211.18
10.208.211.19
10.208.211.20
10.208.211.21
10.208.211.22
10.208.211.23
10.208.211.24
10.208.211.25
10.208.211.26
10.208.211.27
10.208.211.28
10.208.211.29
10.208.211.30
10.208.211.31




cache:
  name1:
    ttl: 600
    heap: 100
  name2:
    ttl: 300
    heap: 200



import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;

@SpringBootApplication
@EnableConfigurationProperties(CacheProperties.class) // Enable CacheProperties  -------------------------------------
public class MyApplication {

    public static void main(String[] args) {
        SpringApplication.run(MyApplication.class, args);
    }
}



import org.ehcache.config.builders.*;
import org.ehcache.core.config.DefaultConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.ehcache.CacheManager;
import org.ehcache.config.CacheConfiguration;
import org.ehcache.core.spi.service.StatisticsService;
import org.ehcache.config.ResourcePoolsBuilder;
import org.ehcache.config.ExpiryPolicyBuilder;

import java.time.Duration;
import java.util.Map;

@Configuration
public class CacheManagerConfig {

    private final CacheProperties cacheProperties;

    public CacheManagerConfig(CacheProperties cacheProperties) {
        this.cacheProperties = cacheProperties;
    }

    @Bean
    public CacheManager cacheManager() {
        CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(true);
        
        Map<String, CacheProperties.CacheConfig> caches = cacheProperties.getCaches(); --------------------

        // Loop through all caches and add them
        caches.forEach((cacheName, config) -> {
            CacheConfiguration<Object, Object> cacheConfig = CacheConfigurationBuilder
                    .newCacheConfigurationBuilder(Object.class, Object.class, ResourcePoolsBuilder.heap(config.getHeap()))
                    .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofSeconds(config.getTtl())))
                    .build();

            cacheManager.createCache(cacheName, cacheConfig);
        });

        return cacheManager;
    }
}



import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.util.Map;

@Component
@ConfigurationProperties(prefix = "cache")
public class CacheProperties {

    private Map<String, CacheConfig> caches;

    public Map<String, CacheConfig> getCaches() {
        return caches;
    }

    public void setCaches(Map<String, CacheConfig> caches) {
        this.caches = caches;
    }

    public static class CacheConfig {
        private long ttl;
        private long heap;

        public long getTtl() {
            return ttl;
        }

        public void setTtl(long ttl) {
            this.ttl = ttl;
        }

        public long getHeap() {
            return heap;
        }

        public void setHeap(long heap) {
            this.heap = heap;
        }
    }
}

