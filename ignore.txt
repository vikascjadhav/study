import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.management.CacheStatisticsMXBean;
import javax.management.MBeanServer;
import javax.management.ObjectName;
import java.lang.management.ManagementFactory;
import java.util.Set;

@Component
public class JCacheStatsLogger {

    private static final Logger logger = LoggerFactory.getLogger(JCacheStatsLogger.class);
    private final CacheManager cacheManager;

    public JCacheStatsLogger(CacheManager cacheManager) {
        this.cacheManager = cacheManager;
    }

    @Scheduled(fixedRate = 10 * 60 * 1000)
    public void logStats() {
        MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();

        Set<String> cacheNames = cacheManager.getCacheNames();
        for (String cacheName : cacheNames) {
            try {
                ObjectName objectName = new ObjectName("javax.cache:type=CacheStatistics,CacheManager="
                        + ObjectName.quote(cacheManager.getURI().toString())
                        + ",Cache=" + ObjectName.quote(cacheName));
                CacheStatisticsMXBean stats = javax.management.JMX.newMBeanProxy(
                        mBeanServer, objectName, CacheStatisticsMXBean.class);

                logger.info("Cache [{}] - Hits: {}, Misses: {}, Puts: {}, Removals: {}, Evictions: {}",
                        cacheName,
                        stats.getCacheHits(),
                        stats.getCacheMisses(),
                        stats.getCachePuts(),
                        stats.getCacheRemovals(),
                        stats.getCacheEvictions());
            } catch (Exception e) {
                logger.warn("Failed to get stats for cache {}", cacheName, e);
            }
        }
    }
}
