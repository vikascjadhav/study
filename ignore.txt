import org.ehcache.Cache;
import org.ehcache.CacheManager;
import org.ehcache.core.statistics.CacheStatistics;
import org.ehcache.jsr107.Eh107Configuration;
import org.ehcache.jsr107.Eh107CacheManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import javax.cache.Caching;
import javax.cache.spi.CachingProvider;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component
public class EhcacheStatsLogger {

    private static final Logger logger = LoggerFactory.getLogger(EhcacheStatsLogger.class);

    @Autowired
    private javax.cache.CacheManager jCacheManager;  // JSR-107 manager

    @Scheduled(fixedRate = 600_000) // every 10 minutes
    public void logCacheSize() {
        Set<String> cacheNames = jCacheManager.getCacheNames();
        for (String name : cacheNames) {
            javax.cache.Cache<?, ?> jcache = jCacheManager.getCache(name);

            if (jcache != null) {
                // Convert to Ehcache instance
                org.ehcache.Cache<?, ?> ehcache = jcache.unwrap(org.ehcache.Cache.class);

                // This gives you access to the management/statistics context
                org.ehcache.core.Ehcache<?, ?> nativeCache = (org.ehcache.core.Ehcache<?, ?>) ehcache;

                long size = nativeCache.getSize(); // ← This works in Ehcache 3.10+
                logger.info("Cache '{}' size: {}", name, size);
            }
        }
    }
}


@Scheduled(fixedRate = 600_000) // every 10 minutes
public void logCacheSize() {
    javax.cache.Cache<?, ?> jcache = cacheManager.getCache("myCache");
    Ehcache<?, ?> ehcache = (Ehcache<?, ?>) jcache.unwrap(org.ehcache.Cache.class);
    long size = ehcache.getStatistics().getSize();
    logger.info("Cache 'myCache' contains {} entries", size);
}




import org.ehcache.Cache;
import org.ehcache.core.Ehcache;
import org.ehcache.core.statistics.CacheStatistics;
import org.ehcache.jsr107.Eh107Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.jcache.JCacheCacheManager;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import javax.cache.CacheManager;
import javax.cache.Caching;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component
public class EhcacheStatsLogger {

    private static final Logger logger = LoggerFactory.getLogger(EhcacheStatsLogger.class);

    @Autowired
    private javax.cache.CacheManager cacheManager;

    @Scheduled(fixedRate = 10 * 60 * 1000) // every 10 minutes
    public void logCacheStats() {
        Set<String> cacheNames = cacheManager.getCacheNames();
        for (String name : cacheNames) {
            javax.cache.Cache<Object, Object> jcache = cacheManager.getCache(name);
            if (jcache != null) {
                org.ehcache.Cache<?, ?> ehcache = (org.ehcache.Cache<?, ?>) jcache.unwrap(org.ehcache.Cache.class);
                if (ehcache instanceof Ehcache) {
                    CacheStatistics stats = ((Ehcache<?, ?>) ehcache).getRuntimeConfiguration()
                            .getResourcePools().getResourceTypeSet().stream()
                            .filter(t -> t == org.ehcache.config.ResourceType.Core.HEAP)
                            .findFirst()
                            .map(t -> ((Ehcache<?, ?>) ehcache).getStatistics())
                            .orElse(null);

                    if (stats != null) {
                        logger.info("Cache '{}' stats — Hits: {}, Misses: {}, Evictions: {}, Hit Ratio: {}",
                                name,
                                stats.getCacheHits(),
                                stats.getCacheMisses(),
                                stats.getCacheEvictions(),
                                stats.getCacheHitPercentage());
                    }
                }
            }
        }
    }
}
